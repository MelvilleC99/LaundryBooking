import React, { useState } from "react";

function App() {
  const [page, setPage] = useState(1);
  const [selectedSlot, setSelectedSlot] = useState(null);
  const [name, setName] = useState("");
  const [cellNumber, setCellNumber] = useState("");
  const [confirmedSlot, setConfirmedSlot] = useState(null);
  const [referenceNumber, setReferenceNumber] = useState(null); // Added state for reference number
  const [error, setError] = useState(null);

  const slots = [
    "08:00",
    "09:00",
    "10:00",
    "11:00",
    "12:00",
    "13:00",
    "14:00",
    "15:00",
    "16:00",
    "17:00",
  ];

  const handleSlotSelection = (slot) => {
    setSelectedSlot(slot);
    setPage(3);
  };

  const handleConfirmation = (confirm) => {
    if (confirm) {
      setPage(4);
    } else {
      setPage(2);
    }
  };

  const handleFinalConfirmation = async () => {
    setConfirmedSlot(selectedSlot);
    const generatedReferenceNumber = generateReferenceNumber(); // Generate reference number
    setReferenceNumber(generatedReferenceNumber); // Store it in state
    setPage(5);

    try {
      const response = await fetch("http://localhost:3001/api/appointments", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name,
          cellNumber,
          selectedSlot,
        }),
      });

      if (!response.ok) {
        throw new Error("Network response was not ok");
      }

      const result = await response.text();
      console.log(result);
      setError(null); // Clear any previous errors
    } catch (error) {
      console.error("Error:", error);
      setError("There was an error submitting the data.");
    }
  };

  const generateReferenceNumber = () => {
    return Math.floor(1000 + Math.random() * 9000).toString();
  };

  const calculateCollectionTime = (slot) => {
    const [hour, minute] = slot.split(":").map(Number);
    let collectionHour = hour + 2;

    if (collectionHour >= 18) {
      return "09:00 tomorrow";
    } else {
      return `${collectionHour.toString().padStart(2, "0")}:${minute
        .toString()
        .padStart(2, "0")}`;
    }
  };

  const styles = {
    app: {
      textAlign: "center",
      minHeight: "100vh",
      display: "flex",
      flexDirection: "column",
      justifyContent: "center",
      alignItems: "center",
    },
    header: {
      backgroundColor: "#282c34",
      padding: "20px",
      color: "white",
      width: "100%",
    },
    landingImage: {
      width: "500px",
      margin: "20px 0",
    },
    button: {
      padding: "10px 20px",
      fontSize: "16px",
      margin: "10px",
    },
    input: {
      padding: "10px",
      fontSize: "16px",
      margin: "10px",
      width: "80%",
    },
    slotSelection: {
      listStyleType: "none",
      padding: 0,
    },
    slotButton: {
      padding: "10px",
      fontSize: "16px",
      margin: "10px 0",
      width: "100px",
    },
    finalMessage: {
      display: "flex",
      flexDirection: "column",
      alignItems: "center",
      justifyContent: "space-between",
      height: "40vh",
      textAlign: "center",
    },
    greetingText: {
      fontSize: "24px",
      fontWeight: "bold",
      marginBottom: "20px",
    },
    ticketText: {
      fontSize: "18px",
      margin: "20px 0",
    },
    referenceNumber: {
      fontSize: "24px",
      fontWeight: "bold",
      color: "blue",
    },
    collectionText: {
      fontSize: "18px",
      marginTop: "20px",
    },
    errorText: {
      color: "red",
      marginTop: "20px",
    },
  };

  return (
    <div style={styles.app}>
      {page === 1 && (
        <>
          <header style={styles.header}>
            <h1>Welcome to Rinse & Repeat</h1>
          </header>
          <div>
            <img src="/L.jpg" alt="L" style={styles.landingImage} />
          </div>
          <div>
            <p>Do you want to make a drop-off booking?</p>
            <button style={styles.button} onClick={() => setPage(2)}>
              Yes
            </button>
          </div>
        </>
      )}

      {page === 2 && (
        <div>
          <h2>Select a Time Slot:</h2>
          <ul style={styles.slotSelection}>
            {slots.map((slot) => (
              <li key={slot}>
                <button
                  style={styles.slotButton}
                  onClick={() => handleSlotSelection(slot)}
                >
                  {slot}
                </button>
              </li>
            ))}
          </ul>
        </div>
      )}

      {page === 3 && (
        <div>
          <p>Are you sure {selectedSlot} works for you?</p>
          <button
            style={styles.button}
            onClick={() => handleConfirmation(true)}
          >
            Yes
          </button>
          <button
            style={styles.button}
            onClick={() => handleConfirmation(false)}
          >
            No
          </button>
        </div>
      )}

      {page === 4 && (
        <div>
          <h2>Please provide your details:</h2>
          <input
            type="text"
            placeholder="Your Name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            style={styles.input}
          />
          <input
            type="text"
            placeholder="Cell Number"
            value={cellNumber}
            onChange={(e) => setCellNumber(e.target.value)}
            style={styles.input}
          />
          <button style={styles.button} onClick={handleFinalConfirmation}>
            Confirm
          </button>
          {error && <p style={styles.errorText}>{error}</p>}
        </div>
      )}

      {page === 5 && (
        <div style={styles.finalMessage}>
          <h2 style={styles.greetingText}>
            Thank You, {name}, for Your Booking!
          </h2>
          <p style={styles.ticketText}>
            Your booking reference number is{" "}
            <span style={styles.referenceNumber}>{referenceNumber}</span>.
          </p>
          <p style={styles.collectionText}>
            Drop-off Time: {confirmedSlot}
            <br />
            Collection Time: {calculateCollectionTime(confirmedSlot)}
          </p>
        </div>
      )}
    </div>
  );
}

export default App;
